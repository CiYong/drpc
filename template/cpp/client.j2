#ifndef __{{ scope }}_{{ interface_name }}_client_hpp__
#define __{{ scope }}_{{ interface_name }}_client_hpp__

#include "{{ interface_name }}_data.hpp"
#include "drpc.hpp"

namespace {{ scope }} {

class {{ name }}Client : public drpc::ClientHandler
{
public:
    {{ name }}Client (const std::string& address)
        : drpc::ClientHandler(address) {}
    ~{{ name }}Client () {}
    {% for function in functions %}
    // {{ function.comment }}
    {% for output in function.outputs %}{{ output }}{% endfor %} {{ function.ident }} ({% for input in function.inputs %}{{ input.type }} {{ input.name }}{% if not input.is_last %}, {% endif %}{% endfor %}) {
        drpc::Message msg;
        auto head = drpc::pack({{ name }}Api::{{ function.ident }});
        msg.emplace_back(head);
        {% for input in function.inputs %}
        msg.emplace_back(drpc::pack({{ input.name }}));{% endfor %}
        this->send(std::move(msg));
    }
    {% endfor %}
};

} // namespace {{ scope }}
#endif // __{{ scope }}_{{ interface_name }}_client_hpp__
